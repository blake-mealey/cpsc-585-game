#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_model;
layout(location = 1) in vec2 vertexUv;
layout(location = 2) in vec3 vertexNormal_model;

// Output data ; will be interpolated for each fragment.
out vec2 fragmentUv;
out vec4 shadowCoord;

// Values that stay constant for the whole mesh.
uniform mat4 modelViewProjectionMatrix;
uniform mat4 depthBiasModelViewProjectionMatrix;


void main(){

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  modelViewProjectionMatrix * vec4(vertexPosition_model, 1);
	
	shadowCoord = depthBiasModelViewProjectionMatrix * vec4(vertexPosition_model, 1);
	
	// UV of the vertex. No special space for this one.
	fragmentUv = vertexUv;
}

